from __future__ import annotations
from .蟒蛇 import *
import ctypes
__all__ = ["可停止线程列表", "可停止线程"]



可停止线程列表: 列表[可停止线程] = []
可停止线程操作锁 = 线程.锁()
class 可停止线程被停止(异常基类): pass
class 可停止线程异常(异常): pass
class 可停止线程(线程.线程):
    @属性装饰器
    def 正在运行(当前对象: 可停止线程):
        return 当前对象.是否在运行()

    def __init__(
            当前对象: 可停止线程,
            线程组: 无 = 无,
            函数对象:
                可选[联合[
                    可调用[[], 任意],
                    可调用[[可停止线程], 任意]
                ]] = 无,
            线程名称: 可选[字符串] = 无,
            位置参数: 元组[任意, ...] = (),
            关键字参数: 可选[字典[字符串, 任意]] = 无,
            *,
            是否为守护线程: 布尔值 = 真,
            数据: 可选[字典[任意, 任意]] = 无,
            用另一线程启动: 布尔值 = 假
        ) -> 无:
        with 可停止线程操作锁:
            if 线程名称 is 无:
                线程名称 = f"可停止线程_{长度(可停止线程列表) +1}"
            if 数据 is 无:
                数据 = {}
            线程.线程.__init__(当前对象, 线程组, 函数对象, 线程名称, 位置参数, 关键字参数, 是否为守护线程 = 是否为守护线程)
            当前对象.数据 = 数据
            当前对象.正在停止 = 假
            可停止线程列表.追加(当前对象)
            if 用另一线程启动:
                线程.线程(当前对象.启动, 是否为守护线程 = 真).启动()
            else:
                当前对象.启动()

    def 运行(当前对象: 可停止线程) -> 无:
        if 当前对象.正在停止:
            raise 可停止线程异常("启动线程异常: 线程仅能启动一次.")
        try:
            打印("线程 %s 启动." % 当前对象.线程名称)
            if 当前对象.函数对象 is not 无:
                if 当前对象.数据:
                    当前对象.函数对象(*当前对象.位置参数, **当前对象.关键字参数, 可停止线程对象 = 当前对象)
                else:
                    当前对象.函数对象(*当前对象.位置参数, **当前对象.关键字参数)
        except 可停止线程被停止:
            pass
        except 异常基类:
            打印("线程 %s 异常:\n%s" % (当前对象.线程名称, 异常回溯.格式化异常()))
        finally:
            当前对象.正在停止 = 真
            垃圾回收.回收()
            with 可停止线程操作锁:
                可停止线程列表.移除(当前对象)
            打印("线程 %s 终止." % 当前对象.线程名称)

    def 停止(当前对象: 可停止线程, 阻塞到停止: 布尔值 = 真) -> 可选[整数]:
        if 当前对象.正在停止:
            return
        if not 当前对象.正在运行:
            raise 可停止线程异常("停止线程异常: 线程未启动.")
        打印("线程 %s 正在终止." % 当前对象.线程名称)
        if 当前对象.线程ID is 无:
            raise 可停止线程异常("停止线程异常: 无法找到线程 ID.")
        结果 = ctypes.pythonapi.PyThreadState_SetAsyncExc(当前对象.线程ID, ctypes.py_object(可停止线程被停止))
        if (结果 != 1) and (not 当前对象.数据):
            raise 可停止线程异常("停止线程异常: 出现错误.")
        当前对象.正在停止 = 真
        if 阻塞到停止:
            当前对象.阻塞()
        return 结果
