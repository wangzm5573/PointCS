from __future__ import annotations
from .蟒蛇 import *
from .可停止线程 import *
from . import 腾讯云文字识别
from .腾讯云文字识别 import 腾讯云软件开发套件异常

class 点命令异常(异常): pass

@枚举._简单枚举(枚举.整数标志)
class 速建者运行状态:
    未启动 = 0
    正在启动 = 1
    正在运行 = 2

作者: 常量[字符串] = "wangzm5773"
操作系统名称 = 平台.操作系统名称()
位架构 = 平台.架构信息()[0]
处理器架构 = 平台.处理器架构().大写英文字母小写化()
if 操作系统名称 not in ["Windows", "Linux"]:
    raise 点命令异常(f"不支持的操作系统 {操作系统名称}")
if 位架构 not in ["64位"]:
    raise 点命令异常(f"不支持的位架构 {位架构}")
if 处理器架构 == "x86_64":
    处理器架构 = "AMD64"
if 处理器架构 == "aarch64":
    处理器架构 = "ARM64"
处理器架构 = 处理器架构.小写英文字母大写化()
if 处理器架构 not in ["AMD64", "ARM64"]:
    raise 点命令异常(f"不支持的处理器架构 {处理器架构}")







def 删除控制台样式字符(文本: 字符串) -> 字符串:
    return 正则.替换(r"\x1b\[[0-9;]*[m|K]", "", 文本)


def 对象是否符合泛型(对象: 任意, 泛型: 联合[泛型别名, 字面别名]) -> 布尔值:
    if 对象是否是类的实例(泛型, 字面别名):
        return 对象 in 泛型.__args__
    if not 对象是否是类的实例(泛型, 泛型别名):
        raise 值的类型不合法(f"检查对象是否符合泛型异常: {类型(泛型)} 不是泛型.")
    泛型的类型 = 泛型.__origin__
    if not 对象是否是类的实例(对象, 泛型的类型):
        return 假
    if 泛型的类型 is 列表:
        元素应该符合的类型 = 泛型.__args__[0]
        检查元素的函数 = 对象是否符合泛型 if 对象是否是类的实例(元素应该符合的类型, (泛型别名, 字面别名)) else 对象是否是类的实例
        if not 全部为真(检查元素的函数(元素, 元素应该符合的类型) for 元素 in 对象):
            return 假
    elif 泛型的类型 is 字典:
        键应该符合的类型, 值应该符合的类型 = 泛型.__args__
        检查键的函数 = 对象是否符合泛型 if 对象是否是类的实例(键应该符合的类型, (泛型别名, 字面别名)) else 对象是否是类的实例
        检查值的函数 = 对象是否符合泛型 if 对象是否是类的实例(值应该符合的类型, (泛型别名, 字面别名)) else 对象是否是类的实例
        if not 全部为真((检查键的函数(键, 键应该符合的类型) and 检查值的函数(值, 值应该符合的类型)) for 键, 值 in 对象.items()):
            return 假
    elif 泛型的类型 is 元组:
        if 长度(对象) != 长度(泛型.__args__):
            return 假
        for 元素, 元素应该符合的类型 in zip(对象, 泛型.__args__):
            检查元素的函数 = 对象是否符合泛型 if 对象是否是类的实例(元素应该符合的类型, (泛型别名, 字面别名)) else 对象是否是类的实例
            if not 检查元素的函数(元素, 元素应该符合的类型):
                return 假
    else:
        raise 值不合法("判断对象是否符合泛型异常: 不支持的泛型.")
    return 真


def 检查对象是否符合泛型(对象: 任意, 泛型: 联合[泛型别名, 字面别名]) -> 无:
    if not 对象是否符合泛型(对象, 泛型):
        raise 值不合法(f"检查对象是否符合泛型异常: 对象不符合泛型.")


def 退出() -> 永不返回:
    [租赁服_.停止() for 租赁服_ in 列表(租赁服映射.值())]
    [线程_.停止() for 线程_ in 可停止线程列表[:]]
    系统.退出()


def 暂停执行并检测(总秒数: 联合[整数, 浮点数], 检测间隔秒数: 联合[整数, 浮点数] = 0.1, 检测函数: 可调用[[联合[整数, 浮点数], 联合[整数, 浮点数], 联合[整数, 浮点数]], 布尔值] = (lambda *_: 假)) -> 布尔值:
    开始时刻 = 时间.性能计时器()
    if 检测间隔秒数 >= 总秒数:
        raise 值不合法("暂停执行并检测异常: 参数 检测间隔秒数 应该小于 参数 总秒数.")
    while (已过时间 := (时间.性能计时器() -开始时刻)) < 总秒数:
        剩余时间 = 总秒数 -已过时间
        if 检测函数(总秒数, 已过时间, 剩余时间):
            return 真
        时间.暂停执行(检测间隔秒数 if (剩余时间 > 检测间隔秒数) else 剩余时间)
    return 假


def 端口是否被占用(端口: 整数, 协议: 字面["传输控制协议", "用户数据报协议"]) -> 布尔值:
    if 协议 == "传输控制协议":
        传输类型 = 套接字.传输类型_流式
    elif 协议 == "用户数据报协议":
        传输类型 = 套接字.传输类型_数据报
        raise 功能未实现
    else:
        raise 值不合法("检查端口是否被占用异常: 参数 协议 应该是 传输控制协议 或 用户数据报协议.")

    with 套接字.套接字(套接字.地址族_互联网协议版本四, 传输类型) as 套接字对象:
        套接字对象.设置超时时间(秒数 = 0.1)
        连接结果 = 套接字对象.连接_不引发异常(("localhost", 端口))
        套接字对象.关闭()
    if 连接结果 == 0:
        return 真
    return 假





租赁服操作锁 = 线程.锁()
速建者启动锁 = 线程.锁()
租赁服映射: 字典 = {}
class 速建者异常(异常): pass
class 速建者启动时异常(速建者异常): pass
class 速建者启动过于频繁异常(速建者启动时异常): pass
class 速建者租赁服未授权异常(速建者启动时异常): pass
class 速建者租赁服未找到异常(速建者启动时异常): pass
class 速建者租赁服连接异常(速建者启动时异常): pass
class 速建者官方服务器连接异常(速建者启动时异常): pass
class 速建者端口监听异常(速建者启动时异常): pass
class 速建者运行时异常(速建者异常): pass
class 租赁服异常(异常): pass
class 租赁服对象创建异常(租赁服异常): pass
class 租赁服(对象):
    def __字符串化__(当前对象: 租赁服) -> 字符串:
        return f"租赁服_{当前对象.租赁服号}"


    def __初始化__(当前对象: 租赁服, 租赁服号: 字符串, 租赁服密码: 可选[字符串] = 无) -> 无:
        with 租赁服操作锁:
            if 租赁服号 in 租赁服映射:
                raise 租赁服对象创建异常("不能重复创建相同的租赁服对象.")
            当前对象.租赁服号 = 租赁服号
            当前对象.租赁服密码 = 租赁服密码 if 租赁服密码 is not 无 else 作者
            当前对象.速建者连接标识 = 无
            当前对象.速建者运行状态 = 速建者运行状态.未启动
            当前对象._设置速建者监听端口()
            当前对象._启动速建者()
            可停止线程(函数对象 = 当前对象._循环启动速建者, 线程名称 = f"{当前对象}_循环启动速建者", 数据 = {"": ""})
            租赁服映射[当前对象.租赁服号] = 当前对象


    def _设置速建者监听端口(当前对象: 租赁服) -> 无:
        端口 = 5700
        while 端口是否被占用(端口 = 端口, 协议 = "传输控制协议"):
            端口 += 10
        当前对象.速建者监听端口 = 端口


    def _启动速建者(当前对象: 租赁服) -> 无:
        with 速建者启动锁:
            当前对象.速建者进程 = 子进程.启动进程(
                程序路径 = f"./程序/速建者/{操作系统名称}_{处理器架构}.可执行文件",
                工作目录 = ".",
                启动参数 = [
                    "",
                    "--plain-token", 速建者令牌,
                    "--code", 当前对象.租赁服号,
                    "--password", 当前对象.租赁服密码,
                    "--listen-external", f"0.0.0.0:{当前对象.速建者监听端口}",
                    "--no-update-check", "--no-readline",
                    "--print-byte-packet",
                    "--debug" if (当前对象.租赁服号 == "调试") else ""
                ],
                编码 = "UTF-8", 标准输出 = 子进程.管道, 标准错误输出 = 子进程.管道, 是否使用通用换行符 = 真
            )
            当前对象.速建者运行状态 = 速建者运行状态.正在启动
            当前对象._读取速建者输出("成功验证 CheckNum." if (当前对象.租赁服号 != "调试") else "成功连接到服务器")
            当前对象.速建者运行状态 = 速建者运行状态.正在运行
            可停止线程(函数对象 = 当前对象._读取速建者输出, 线程名称 = f"{当前对象}_读取速建者输出", 数据 = {"": ""})


    def _循环启动速建者(当前对象: 租赁服, 可停止线程对象: 可停止线程) -> 无:
        线程是否正在停止 = (lambda *_: 可停止线程对象.正在停止)
        while not 线程是否正在停止():
            if 当前对象.速建者运行状态 != 速建者运行状态.未启动:
                时间.暂停执行(秒数 = 0.2)
                continue
            try:
                if 暂停执行并检测(总秒数 = 5, 检测间隔秒数 = 0.2, 检测函数 = 线程是否正在停止): return
                当前对象._启动速建者()
            except 速建者启动时异常 as 异常:
                打印(字符串(异常))
                if 暂停执行并检测(总秒数 = 55, 检测间隔秒数 = 0.2, 检测函数 = 线程是否正在停止): return


    def 重启速建者(当前对象: 租赁服) -> 无:
        if 当前对象.速建者运行状态 != 速建者运行状态.正在运行:
            raise 租赁服异常("重启速建者异常: 速建者不在运行.")
        当前对象._终止速建者()


    def _终止速建者(当前对象: 租赁服) -> 无:
        当前对象.速建者运行状态 = 速建者运行状态.未启动
        当前对象._关闭速建者连接()
        当前对象.速建者进程.终止()
        当前对象.速建者进程.等待终止()


    def _连接速建者(当前对象: 租赁服) -> 无:
        当前对象.速建者连接标识 = 速建者动态链接库.连接速建者(f"localhost:{当前对象.速建者监听端口}")


    def _关闭速建者连接(当前对象: 租赁服) -> 无:
        if 当前对象.速建者连接标识 is not 无:
            速建者动态链接库.关闭速建者连接(当前对象.速建者连接标识)


    def 停止(当前对象: 租赁服) -> 无:
        with 租赁服操作锁:
            当前对象._终止速建者()
            [线程.停止() for 线程 in 可停止线程列表[:] if 线程.线程名称.开头是否为(字符串(当前对象))]
            del 租赁服映射[当前对象.租赁服号]


    def _读取速建者输出(当前对象: 租赁服, 读到此字符串时退出: 可选[字符串] = 无, 可停止线程对象: 可选[可停止线程] = 无) -> 无:
        线程是否正在停止 = (lambda *_: 可停止线程对象.正在停止) if (可停止线程对象 is not 无) else (lambda *_: 假)
        错误信息 = 字符串("")
        异常类型 = 速建者启动时异常
        while (not 线程是否正在停止()) and (当前对象.速建者运行状态 != 速建者运行状态.未启动):
            if (速建者进程返回码 := 当前对象.速建者进程.是否终止()) is not 无:
                当前对象.速建者运行状态 = 速建者运行状态.未启动
                raise 异常类型("速建者退出." if (not 错误信息) else 错误信息)

            原始输出 = 当前对象.速建者进程.标准输出.读取一行()
            去色输出 = 删除控制台样式字符(原始输出)
            打印(原始输出, end = "")

            if 去色输出.开头是否为(" ERROR  "):
                去色输出 = 去色输出.替换(" ERROR  ", "", 1)

                if 去色输出.开头是否为("按ENTER（回车）键来退出程序。"):
                    错误信息 = 错误信息.末尾去除字符("\n")
                    当前对象._终止速建者()
                    raise 异常类型(错误信息)

                if (去色输出 not in ["FastBuilder Phoenix 运行过程遇到问题\n", "Stack dump 于上方显示。错误为：\n"]) \
                    and (去色输出 not in 错误信息):
                    错误信息 += 去色输出
                if 去色输出.开头是否为("[RATE LIMIT]"):
                    异常类型 = 速建者启动过于频繁异常
                if 去色输出.开头是否为("对应租赁服号尚未授权"):
                    异常类型 = 速建者租赁服未授权异常
                if 去色输出.开头是否为("租赁服未找到"):
                    异常类型 = 速建者租赁服未找到异常
                if 去色输出.开头是否为("dial "):
                    异常类型 = 速建者租赁服连接异常
                if 去色输出.开头是否为("Failed to contact with API"):
                    异常类型 = 速建者官方服务器连接异常

            if 去色输出.开头是否为("Failed to listen on address"):
                异常类型 = 速建者端口监听异常
                错误信息 = 去色输出.末尾去除字符("\n")
                当前对象._终止速建者()
                raise 异常类型(去色输出)

            if 去色输出.开头是否为("Listening for external connection"):
                当前对象._连接速建者()

            if 去色输出.开头是否为("成功连接到服务器。"):
                异常类型 = 速建者运行时异常

            if 去色输出.开头是否为("sendpk: ") or 去色输出.开头是否为("recvpk: "):
                # 当前对象._处理数据包(去色输出)
                pass

            if 读到此字符串时退出 and 去色输出.开头是否为(读到此字符串时退出):
                return



速建者用户中心对象映射: 字典 = {}
速建者用户中心对象创建锁 = 线程.可重入锁()
class 速建者用户中心操作异常(异常): pass
class 速建者用户中心操作(对象):
    def __初始化__(当前对象: 速建者用户中心操作, 用户名: 字符串, 密码: 字符串) -> 无:
        with 速建者用户中心对象创建锁:
            if 用户名 in 速建者用户中心对象映射:
                raise 速建者用户中心操作异常("不能重复创建相同的速建者用户中心操作对象")
            当前对象.用户名 = 用户名
            当前对象.密码 = 密码
            当前对象._登录用户中心()
            当前对象._获取用户详细信息()
            当前对象._获取辅助机器人名称()
            速建者用户中心对象映射[用户名] = 当前对象


    @静态方法
    def 加密密码(密码: 字符串) -> 字符串:
        return 散列.安全散列算法256位(密码.编码("UTF-8")).十六进制值()


    def _登录用户中心(当前对象: 速建者用户中心操作) -> 无:
        with 速建者用户中心对象创建锁:
            当前对象.会话 = 网络请求.会话()
            当前对象.会话.请求头["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.50"
            当前对象.秘密 = 当前对象.会话.获取("https://api.fastbuilder.pro/api/new").文本内容
            当前对象.会话.请求头["Authorization"] = f"Bearer {当前对象.秘密}"
            返回结果 = 当前对象.会话.提交("https://api.fastbuilder.pro/api/login", 表单数据 = JSON.编码({
                "username": 当前对象.用户名,
                "password": 当前对象.加密密码(当前对象.密码),
                "mfa_code": ""
            })).JSON内容()
            if 返回结果["success"] is 假:
                raise 速建者用户中心操作异常(返回结果["message"])
            当前对象.会话创建时间 = 时间.时间()


    def _网络请求(当前对象: 速建者用户中心操作, 速建者用户中心应用程序编程接口的统一资源定位符: 字符串, 请求方式: 字面["获取", "提交"], 查询参数: 可选[任意] = 无, 表单数据: 可选[任意] = 无, 是否JSON化返回结果: 布尔值 = 真, 是否在不成功时引发异常: 布尔值 = 真) -> 联合[JSON, 字节串]:
        if 请求方式 == "获取":
            请求函数 = 当前对象.会话.获取
        elif 请求方式 == "提交":
            请求函数 = 当前对象.会话.提交
        else:
            raise 值不合法("网络请求异常: 参数 请求方式 应该为 获取 或 提交.")
        if 时间.时间() -当前对象.会话创建时间 >= 600:
            当前对象._登录用户中心()
        返回结果 = 请求函数(速建者用户中心应用程序编程接口的统一资源定位符, 查询参数 = 查询参数, 表单数据 = 表单数据)
        if not 是否JSON化返回结果:
            return 返回结果.原始内容
        返回结果 = 返回结果.JSON内容()
        if 是否在不成功时引发异常:
            if not 返回结果["success"]:
                raise 速建者用户中心操作异常(返回结果["message"])
        return 返回结果


    def _获取(当前对象: 速建者用户中心操作, 速建者用户中心应用程序编程接口的统一资源定位符: 字符串, 查询参数: 可选[任意] = 无, 表单数据: 可选[任意] = 无, 是否JSON化返回结果: 布尔值 = 真, 是否在不成功时引发异常: 布尔值 = 真) -> 联合[字典, 字节串]:
        返回结果 = 当前对象._网络请求(速建者用户中心应用程序编程接口的统一资源定位符, "获取", 查询参数, 表单数据, 是否JSON化返回结果, 是否在不成功时引发异常)
        return 返回结果


    def _提交(当前对象: 速建者用户中心操作, 速建者用户中心应用程序编程接口的统一资源定位符: 字符串, 查询参数: 可选[任意] = 无, 表单数据: 可选[任意] = 无, 是否JSON化返回结果: 布尔值 = 真, 是否在不成功时引发异常: 布尔值 = 真) -> 联合[字典, 字节串]:
        返回结果 = 当前对象._网络请求(速建者用户中心应用程序编程接口的统一资源定位符, "提交", 查询参数, 表单数据, 是否JSON化返回结果, 是否在不成功时引发异常)
        return 返回结果


    def _获取辅助机器人名称(当前对象: 速建者用户中心操作) -> 无:
        返回结果 = 当前对象._获取("https://api.fastbuilder.pro/api/get_helper_status")
        当前对象.辅助机器人名称 = 返回结果["username"]


    def _获取用户详细信息(当前对象: 速建者用户中心操作) -> 无:
        返回结果 = 当前对象._获取("https://api.fastbuilder.pro/api/fetch_profile")
        # 当前对象.是否被限制登录频率 = 返回结果["is_rate_limited"]
        当前对象.是否被限制登录频率 = 假
        当前对象.剩余到期时长 = 返回结果["monthly_plan_duration"]
        租赁服槽位映射: 字典 = {}
        for 租赁服槽位 in 返回结果["slots"]:
            租赁服槽位映射[租赁服槽位["slotid"]] = {
                "类型": "固定" if 租赁服槽位["locked"] else "可变",
                "租赁服号": 租赁服槽位["sid"],
                "是否可更改租赁服号": 租赁服槽位["canchange"],
                "距离可更改租赁服号天数": 租赁服槽位["ato"] if (not 租赁服槽位["locked"]) else -1
            }
        当前对象.租赁服槽位映射 = 租赁服槽位映射


    def _修改槽位租赁服号(当前对象: 速建者用户中心操作, 槽位编号: 字符串, 租赁服号: 字符串, 是否无需更新详细信息: 布尔值 = 假) -> 无:
        if (not 租赁服号.是否为十进制整数()) or (整数(租赁服号) <= 0):
            raise 值不合法("修改槽位租赁服号异常: 参数 租赁服号 应为正整数字符串.")
        if not 是否无需更新详细信息:
            当前对象._获取用户详细信息()
        if 槽位编号 not in 当前对象.租赁服槽位映射:
            raise 速建者用户中心操作异常("修改槽位租赁服号异常: 槽位编号不存在")
        租赁服槽位 = 当前对象.租赁服槽位映射[槽位编号]
        if 租赁服槽位["类型"] == "固定":
            raise 速建者用户中心操作异常("修改槽位租赁服号异常: 不可更改 固定 类型槽位的租赁服号.")
        if not 租赁服槽位["是否可更改租赁服号"]:
            raise 速建者用户中心操作异常(f"修改槽位租赁服号异常: 此槽位在 {租赁服槽位['距离可更改租赁服号天数']} 天后才可更改.")
        当前对象._获取(f"https://api.fastbuilder.pro/api/save_slot?slotid={槽位编号}&content={租赁服号}&operation=save")


    def _设定租赁服号到一个空的可变类型的槽位(当前对象: 速建者用户中心操作, 租赁服号: 字符串) -> 无:
        当前对象._获取用户详细信息()
        for 槽位编号, 租赁服槽位 in 当前对象.租赁服槽位映射.键值对():
            if (租赁服槽位["类型"] == "可变") and (租赁服槽位["租赁服号"] == "") and (租赁服槽位["是否可更改租赁服号"]):
                当前对象._修改槽位租赁服号(槽位编号, 租赁服号, 是否无需更新详细信息 = 真)
                return
        raise 速建者用户中心操作异常("设定租赁服号到一个空的可变类型的槽位异常: 所有可变类型的槽位都已经被占用.")


    def _获取解除登录限制的验证码图片(当前对象: 速建者用户中心操作, 是否无需更新详细信息: 布尔值 = 假) -> 字节串:
        if not 是否无需更新详细信息:
            当前对象._获取用户详细信息()
        if not 当前对象.是否被限制登录频率:
            raise 速建者用户中心操作异常("获取解除登录限制的验证码图片异常: 当前用户未被限制登录频率.")
        验证码图片字节串: 字节串 = 当前对象._获取("https://api.fastbuilder.pro/api/captcha", 是否JSON化返回结果 = 假)
        return 验证码图片字节串


    def _尝试用腾讯云识别验证码图片并解除登录限制(当前对象: 速建者用户中心操作, 是否无需更新详细信息: 布尔值 = 假) -> 无:
        if not 是否无需更新详细信息:
            当前对象._获取用户详细信息()

        验证码图片字节串 = 当前对象._获取解除登录限制的验证码图片(是否无需更新详细信息)

        验证码图像 = 图像处理.图像.打开(输入输出模块.字节流(验证码图片字节串))
        验证码图像像素 = 验证码图像.加载像素数据()
        验证码图像宽, 验证码图像高 = 验证码图像.宽高
        验证码文字颜色 = (188, 255, 255)
        for 纵坐标 in 范围(验证码图像高):
            for 横坐标 in 范围(验证码图像宽):
                像素颜色 = 验证码图像像素[横坐标, 纵坐标]
                像素颜色差值 = 求和(绝对值(像素颜色[颜色索引] -验证码文字颜色[颜色索引]) for 颜色索引 in 范围(3))
                if 像素颜色差值 <= 200:
                    验证码图像像素[横坐标, 纵坐标] = (255, 255, 255)
                else:
                    验证码图像像素[横坐标, 纵坐标] = (0, 0, 0)

        with 输入输出模块.字节流() as 验证码图片字节流:
            验证码图像.保存(验证码图片字节流, 格式 = "PNG")
            验证码图片字节流.移动指针位置(0)
            验证码图片字节串 = 验证码图片字节流.读取()

        返回结果 = 腾讯云文字识别.广告文字识别(基底64.基底64编码(验证码图片字节串).解码("UTF-8"))
        文字识别结果列表: 列表 = 返回结果["TextDetections"]
        for 文字识别结果 in 文字识别结果列表[:]:
            文字识别结果字符串 = 文字识别结果["DetectedText"]
            文字识别置信度 = 文字识别结果["Confidence"]
            文字识别结果优化字符串 = 字符串("").连接(正则.找出所有(r"[a-zA-Z0-9]+", 文字识别结果字符串)).大写英文字母小写化()
            if 长度(文字识别结果优化字符串) != 12:
                文字识别结果列表.移除(文字识别结果)
                是否识别错误: 布尔值 = 真
            else:
                是否识别错误: 布尔值 = 假
            打印("可信结果:" if (not 是否识别错误) else "识别错误:", f"{文字识别结果字符串} -> {文字识别结果优化字符串}, {文字识别置信度}%")
        if 长度(文字识别结果列表) != 1:
            raise 速建者用户中心操作异常("尝试用腾讯云识别验证码图片并解除登录限制异常: 识别结果不唯一.")
        验证码文字 = 文字识别结果列表[0]["DetectedText"]
        当前对象._获取(f"https://api.fastbuilder.pro/api/waive_rate_limit?captcha={验证码文字}")


    def _尝试解除登录限制(当前对象: 速建者用户中心操作, 最大尝试次数: 整数 = 10) -> 无:
        当前对象._获取用户详细信息()
        if not 当前对象.是否被限制登录频率:
            raise 速建者用户中心操作异常("解除登录限制异常: 当前用户未被限制登录频率.")
        for 尝试次数 in 范围(最大尝试次数):
            尝试次数 += 1
            打印(f"[{尝试次数:0{长度(字符串(最大尝试次数))}d}/{最大尝试次数}] 正在尝试解除登录限制...")
            try:
                当前对象._尝试用腾讯云识别验证码图片并解除登录限制(是否无需更新详细信息 = 真)
                打印("成功解除登录限制.")
                return
            except 速建者用户中心操作异常 as 异常对象:
                打印(字符串(异常对象))
        raise 速建者用户中心操作异常("尝试解除登录限制异常: 尝试失败了...")


    def _获取租赁服进服玩家记录列表(当前对象: 速建者用户中心操作, 租赁服号: 字符串) -> 字典:
        if (not 租赁服号.是否为十进制整数()) or (整数(租赁服号) <= 0):
            raise 值不合法("获取租赁服进服玩家记录列表异常: 参数 租赁服号 应为正整数字符串.")
        返回结果 = 当前对象._提交(f"https://api.fastbuilder.pro/local/cgi/server_list_export",
            查询参数 = {
                "secret": 当前对象.秘密
            },
            表单数据 = {
                "server_code": 租赁服号,
                "password": "シャミ子が悪いんだよ",
                "type": "whitelist"
            },
            是否JSON化返回结果 = 假
        ).解码("UTF-8")
        if 返回结果.开头是否为("<!DOCTYPE HTML"):
            raise 速建者用户中心操作异常("获取租赁服进服玩家记录列表异常: 获取失败.")
        返回结果 = JSON.解码(返回结果)
        return 返回结果





from . import 速建者动态链接库
from .速建者动态链接库 import 速建者动态链接库异常, 速建者解码数据包异常

with 打开("./程序/速建者/令牌", "r", 编码 = "UTF-8") as 文件:
    速建者令牌 = 文件.读取()

租赁服("调试").停止()
